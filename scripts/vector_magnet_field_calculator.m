%==========================================================================
% vector_magnet_field_calculator.m
% Author: GroeblacherLab / Gaia Da Prato
% Date: 03/09/2024
%
% Description:
%   Script to define and evaluate a three-axis vector magnet.
%   Allows magnetic field computation at specific points and across planes
%   using defined bobbin geometries, positions, and polarities.
%
%   Includes:
%   - Coil definitions (designed, effective or optimized)
%   - Magnetic field calculation at arbitrary positions
%   - Parametric sweep of bobbin geometry (e.g., outer radius)
%   - 1D nanopositioner position sweep
%   - 2D magnetic field maps and 3D visualizations
%
% Related publication:
%   G. Da Prato et al., Rev. Sci. Instrum. 96, 065208 (2025)
%   https://doi.org/10.1063/5.0270187
%==========================================================================

clear all
close all

%% Define Bobbins

% Designed values
% %             r_in, r_ex,   h,     t,    p
% bobx = Bobbin(   4,   29,  24, 0.127, 0.127); %design values: 4, 29, 24, 0.127, 0.127
% boby = Bobbin(   4,   35,  24, 0.127, 0.127); %design values: 4, 35, 24, 0.127, 0.127
% bobz = Bobbin(   4,   20,  12, 0.127, 0.127); %design values: 4, 20, 12, 0.127, 0.127

% Effective winding parameters
%             r_in, r_ex,      h,     t,    p
bobx = Bobbin(   4, 21.7, 24-0.5, 0.143, 0.15);
boby = Bobbin(   4, 23.5,   24-1,  0.13, 0.15);
bobz = Bobbin(   4, 20-2, 12-0.5,  0.14, 0.15);

% Optimized bobbins if fully winded, larger height, epoxy considered
% %             r_in, r_ex,   h,     t,    p
% bobx = Bobbin(   4,   29,  40, 0.143, 0.15); %design values: 4, 29, 24, 0.127, 0.127
% boby = Bobbin(   4,   35,  40,  0.13, 0.15); %design values: 4, 35, 24, 0.127, 0.127
% bobz = Bobbin(   4,   20,  40,  0.14, 0.15); %design values: 4, 20, 12, 0.127, 0.127

% Define other (improved) bobbins
bobSHB = Bobbin( 16.1/2,  32.5-15, 30-1, 0.16, 0.15); %design values: 16.1, 32.5, 30, 0.150, 0.150
bobSHB2 = Bobbin( 16.1/2,  32.5-2, 30-1, 0.14, 0.14); %design values: 16.1, 32.5, 30, 0.127, 0.127

%% Display parameters of single bobbin
bob = bobSHB2;
disp(bob.layers);
disp(bob.winds_per_layer);
disp(bob.winds);
disp(bob.wire_length);
disp(bob.volume);
disp(bob.weight);

%% Define Bobbin Positions and Polarities
% Coordinate origin = sample position

% Position of the bobbins center (current vector magnet)
posx = [-37.5,           0,          0];
posy = [    0,       -45.0,          0];
posz = [    0,           0,       11.9];


% % Position of the bobbins center (optimized vector magnet)
% posx = [-45.5,           0,          0];
% posy = [    0,         -53,          0];
% posz = [    0,           0,       25.9];

% Polarity (+1 or -1) of the bobbins: in which direction is the current applied, or in which direction is the bobbin placed?
polx = 1; poly = 1; polz = 1;

%% Create Vector Magnet Object
vmag = VectorMagnet(bobx, boby, bobz, ...
    posx, posy, posz, ...
    polx, poly, polz);

%% Magnetic field generated by a single bobbin at a fixed point
bobSHB2.magnetic_field_off_axis_bobbin(19, 12, 1) % z, rho, I = 1 A

%% Parameter Sweep: Effect of Outer Radius (r_ex) on Magnetic Field
r_ex_list = linspace(17.5, 32.5, 10);
B = zeros(size(r_ex_list));
i = 0;
for r_ex = r_ex_list
    i = i+1;
    bob_tmp = Bobbin( 16.1/2,  r_ex , 30-1, 0.16, 0.15);% r_in, r_ex,   h,     t,    p
    [~, ~, B(i)] = bob_tmp.magnetic_field_off_axis_bobbin(0, 12, 1); % z, rho, I = 1 A
end

f1 = figure(1); f1.Position = [10,470,400,300];
plot(r_ex_list, B, 'o-'); grid on
xlabel('R_{ex} (mm)'); ylabel('Magnetic Field (T)');
title('Magnetic Field vs. Bobbin Outer Radius');

%% Compute Total Field at a fixed point
pos = [0, 0, 0]; % sample or probe position
curr = [0, 0, 10]; % current in x, y, z
[Bx, By, Bz] = vmag.tot_magnetic_field(pos, curr);

disp(Bx); disp(By); disp(Bz)

%% 1D sweep of nanopositioner position in Y or Z direction
curr = [0, 0, 1]; % current
range = 5; % nanopositioner range

% sweep from left to right (y-direction)
range_sweep = 5; % nanopositioner sweep range
y_v = linspace(0, range_sweep, 50);
z = 1.7;
x = 3.1;

Bx = zeros(size(y_v));
By = zeros(size(y_v));
Bz = zeros(size(y_v));
i = 0;

for y = y_v
    i = i+1;
    %positions of Hall probes X, Y, and Z
    pos_x =  [0.3, -1.56- range/2 + y,  -13.25 + z];
    pos_y =  [10.74, -13.2- range/2 + y,  -14.55 + z];
    pos_z =  [8.74+range/2-x, 3.55-range/2+y, -0.5+z];
    [Bx(i), ~, ~] = vmag.tot_magnetic_field(pos_x, curr);
    [~, By(i), ~] = vmag.tot_magnetic_field(pos_y, curr);
    [~, ~, Bz(i)] = vmag.tot_magnetic_field(pos_z, curr);
end

% % sweep from down to up (z-direction)
% range_sweep = 1.8;
% z_v = linspace(0, range_sweep, 50);
% y = 2.5;
% x = 3.1;
%
% Bx = zeros(size(z_v));
% By = zeros(size(z_v));
% Bz = zeros(size(z_v));
% i = 0;
%
% for z = z_v
%     i = i+1;
%     %positions of Hall probes X, Y, and Z
%     pos_x =  [0.3, -1.56- range_y/2 + y,  -13.25 + z];
%     pos_y =  [10.74, -13.2- range_y/2 + y,  -14.55 + z];
%     pos_z =  [8.74+range/2-x, 3.55-range/2+y, -0.5+z];
%     [Bx(i), ~, ~] = vmag.tot_magnetic_field(pos_x, curr);
%     [~, By(i), ~] = vmag.tot_magnetic_field(pos_y, curr);
%     [~, ~, Bz(i)] = vmag.tot_magnetic_field(pos_z, curr);
% end

%% Plot 1D Sweep
f2 = figure(2); f2.Position = [10,35,500,350];
subplot(3,1,1)
plot(y_v, Bx*1000); grid on
xlabel('Position (mm)'); ylabel('B_x field (mT)')
title('Bobbin z at 1 A, sweep Attocube y') % from left to right
%title('Bobbin z at 1 A, sweep Attocube z') % from down to up

subplot(3,1,2)
plot(y_v, By*1000); grid on
xlabel('Position (mm)'); ylabel('B_y field (mT)')

subplot(3,1,3)
plot(y_v, Bz*1000); grid on
xlabel('Position (mm)'); ylabel('B_z field (mT)')

%% 2D Field Map in Plane

% Chip plane (001, or xy) (from top)
grid_size = [5, 10]; % how many points in each direction
grid_range = [2, 5]; % range in each direction [mm]
plane_vector = [0, 0, 1];  % vector that defines the plane
P0 = [0, 0, 0]; % point in the center of the plane
curr = [1, 0, 0]; % current in each bobbin

% % Side plane (110, or yz) (from front)
% grid_size = [10, 5]; % how many points in each direction
% grid_range = [5, 2]; % range in each direction [mm]
% plane_vector = [1, 0, 0];  % vector that defines the plane
% P0 = [0, 0, 0]; % point in the center of the plane
% curr = [1, 0, 0]; % current in each bobbin

% Calculate B field map
[points_matrix, field_matrix] = vmag.field_map_in_plane(plane_vector, P0, grid_size, grid_range, curr);
Bx = field_matrix(:,1); By = field_matrix(:,2); Bz = field_matrix(:,3);

% Generate a 2D grid of points (u, v)
u = linspace(-grid_range(1)/2, grid_range(1)/2, grid_size(2));  % u-coordinates
v = linspace(-grid_range(2)/2, grid_range(2)/2, grid_size(1));  % v-coordinates
[u, v] = meshgrid(u, v);
% Center the grid at the origin
u = u - mean(u(:));
v = v - mean(v(:));

% Reshape B field
Bx_mat = reshape(Bx, size(u,2), size(v,1));
By_mat = reshape(By, size(u,2), size(v,1));
Bz_mat = reshape(Bz, size(u,2), size(v,1));

% Normalize B field
sub_max = false; % subtract the maximum when noramlize B field
norm_Bx_mat = normalize(Bx_mat, sub_max);
norm_By_mat = normalize(By_mat, sub_max);
norm_Bz_mat = normalize(Bz_mat, sub_max);

%% Plot 2D Field Map
B_plot = norm_Bx_mat;
B_3D_plot = Bx;

% this figure is expressed in uv coordinates
f3 = figure(3); f3.Position = [515,50,500,400];
imagesc(u(1,:), v(:,1), B_plot);
xlabel('u (mm)'); ylabel('v (mm)');
colormap autumn; axis equal; axis tight; set(gca, 'YDir', 'normal');
c = colorbar; c.Label.String = 'B field (a.u.)';

%% 3D View with Coil Markers
f4 = figure(4); f4.Position = [1025,50,500,400];
scatter3(points_matrix(:,1), points_matrix(:,2), points_matrix(:,3),...
    50, B_3D_plot, 'o', 'filled'); hold on
%bobbin x position
scatter3(posx(1), posx(2), posx(3), 'bo', 'filled')
hold on
%bobbin y position
scatter3(posy(1), posy(2), posy(3), 'mo', 'filled')
hold on
%bobbin z position
scatter3(posz(1), posz(2), posz(3), 'go', 'filled')
xlabel('X (mm)'); ylabel('Y (mm)'); zlabel('Z (mm)');
colormap autumn; axis equal; grid on; set(gca, 'ZDir', 'reverse'); set(gca, 'YDir', 'reverse');
c = colorbar; c.Label.String = 'B field (T)';

%% Utility: Normalize Field Map
function norm_B = normalize(B, sub_max)
    if sub_max
        norm_B = B/max(B(:))-1;
    else
        norm_B = B/max(B(:));
    end
end
